#!/bin/bash

# ───────────────────────────────────────────────────────────────────────────│─╗
# │ Code execution                                                         ─╬─│┼
# ╚────────────────────────────────────────────────────────────────────────────│

# Run last modified file in directory (C++, Python, Java)
# e.g: `r p` will run the last modified Python file in the
# current working directory
function r() {
  file="$(ls -t | head -n 1)"
  case "$1" in
    p)
      python3 "$file"
      ;;
    j)
      javac "$file" && java "${file%.*}"
      ;;
    *)
      g++ -std=c++17 "$file" && ./a.out;
      rm -rf a.out;
  esac
}

# Compile and run a C++ file
function run() {
  g++ -std=c++17 "$@" && ./a.out;
}

# Run a Python file
function py() {
  python3 "$@";
}

# ───────────────────────────────────────────────────────────────────────────│─╗
# │ File system                                                            ─╬─│┼
# ╚────────────────────────────────────────────────────────────────────────────│

# Create and cd into directory
function mkcd() {
  mkdir -p "$@" && cd "$@" || exit
}

# Open a file in Google Chrome
function oc() {
  open -a "Google Chrome" "$@"
}

# Open a directory using `open`
function o() {
  if [ $# -eq 0 ]; then open .; else open "$@"; fi;
}

# See absolute path
function realpath() {
  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

# Determine size of a file or total size of a directory
# from https://github.com/mathiasbynens/dotfiles/blob/main/.functions
function fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh;
  else
    local arg=-sh;
  fi
  if [[ -n "$*" ]]; then
    du $arg -- "$@";
  else
    du $arg .[^.]* ./*;
  fi;
}

# ───────────────────────────────────────────────────────────────────────────│─╗
# │ Application startup                                                    ─╬─│┼
# ╚────────────────────────────────────────────────────────────────────────────│

# Startup redis
function redis() {
 redis-server /usr/local/etc/redis.conf
}

# ───────────────────────────────────────────────────────────────────────────│─╗
# │ Git utilities                                                          ─╬─│┼
# ╚────────────────────────────────────────────────────────────────────────────│

# See total number of commits
function noc() {
  git rev-list --count HEAD
}

# Open all modified git files in vim
function vmo {
  nvim "$(git status --porcelain | awk '{print $2}')"
}

# Checks if the cwd is a git repository
function is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

# Spawn an FZF window
function fzf-down() {
  fzf --height 50% --min-height 20 --border --bind ctrl-/:toggle-preview "$@"
}

# Search through modified git files with FZF
function sgf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

# Search through git commits with FZF
function sgc() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
  grep -o "[a-f0-9]\{7,\}"
}

# Checkout a git branch with FZF
function sgb() {
  git checkout "$(git branch | fzf | tr -d '[:space:]')"
}

# ───────────────────────────────────────────────────────────────────────────│─╗
# │ Miscellaneous                                                          ─╬─│┼
# ╚────────────────────────────────────────────────────────────────────────────│

# Fetch bitcoin price information
function btc() {
  curl rate.sx/btc
}

# Fetch weather information
function weather() {
  curl -s "wttr.in/?format=%l:+%c+%t\n"
}

# Generate a SHA-256 hash
function sha() {
  echo -n "$@" | shasum -a 256
}
